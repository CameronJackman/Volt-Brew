//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Owen/Layout/PlayerDefault.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerDefault: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerDefault()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerDefault"",
    ""maps"": [
        {
            ""name"": ""DefaultMovement"",
            ""id"": ""28a5f4bc-9e3e-402f-bd90-394cb215f8e1"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c7df3d85-7e8a-420f-a535-109d6fd9ce56"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""54820fbb-2e34-4ff1-a8dc-b21849f02d04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aiming"",
                    ""type"": ""Value"",
                    ""id"": ""9e7c00c0-df0f-4754-a858-aaf7f6b9cf2a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aiming Controller"",
                    ""type"": ""Value"",
                    ""id"": ""ca2209ec-33f0-4a51-ae7a-8690d45eb132"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""firing"",
                    ""type"": ""Button"",
                    ""id"": ""7e8acefc-1959-4659-b8f4-db9269b0369d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a113d0d6-bdc1-44ce-b721-4f94139b94d9"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0433632-6f98-4896-a9cb-21f1d9be7c6b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""352d9c0a-93b6-41a6-838b-4693ac1e12ab"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKey"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9179704b-67c8-4ea5-9470-f793f38b139d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKey"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2162ad04-1e4b-402a-8776-ca06e29107ee"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKey"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b1520399-91af-4979-b9ad-e8a05a9afff6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKey"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f0f18e90-31fe-44e7-9fae-562068d8d8aa"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKey"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8d3473b-6c89-4e95-8036-29bb134e0828"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e36c96cb-cb8e-4510-b074-5ad4f42d09a5"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKey"",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""367adda1-df76-4b0a-bf4c-183c9cb83de8"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Aiming Controller"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""672b0331-203b-4a74-8b0b-90a1ff69bb61"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""firing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8154f15-ea93-4567-9d93-f7da64fb1498"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKey"",
                    ""action"": ""firing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseKey"",
            ""bindingGroup"": ""MouseKey"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // DefaultMovement
        m_DefaultMovement = asset.FindActionMap("DefaultMovement", throwIfNotFound: true);
        m_DefaultMovement_Movement = m_DefaultMovement.FindAction("Movement", throwIfNotFound: true);
        m_DefaultMovement_Dash = m_DefaultMovement.FindAction("Dash", throwIfNotFound: true);
        m_DefaultMovement_Aiming = m_DefaultMovement.FindAction("Aiming", throwIfNotFound: true);
        m_DefaultMovement_AimingController = m_DefaultMovement.FindAction("Aiming Controller", throwIfNotFound: true);
        m_DefaultMovement_firing = m_DefaultMovement.FindAction("firing", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DefaultMovement
    private readonly InputActionMap m_DefaultMovement;
    private List<IDefaultMovementActions> m_DefaultMovementActionsCallbackInterfaces = new List<IDefaultMovementActions>();
    private readonly InputAction m_DefaultMovement_Movement;
    private readonly InputAction m_DefaultMovement_Dash;
    private readonly InputAction m_DefaultMovement_Aiming;
    private readonly InputAction m_DefaultMovement_AimingController;
    private readonly InputAction m_DefaultMovement_firing;
    public struct DefaultMovementActions
    {
        private @PlayerDefault m_Wrapper;
        public DefaultMovementActions(@PlayerDefault wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_DefaultMovement_Movement;
        public InputAction @Dash => m_Wrapper.m_DefaultMovement_Dash;
        public InputAction @Aiming => m_Wrapper.m_DefaultMovement_Aiming;
        public InputAction @AimingController => m_Wrapper.m_DefaultMovement_AimingController;
        public InputAction @firing => m_Wrapper.m_DefaultMovement_firing;
        public InputActionMap Get() { return m_Wrapper.m_DefaultMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultMovementActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Aiming.started += instance.OnAiming;
            @Aiming.performed += instance.OnAiming;
            @Aiming.canceled += instance.OnAiming;
            @AimingController.started += instance.OnAimingController;
            @AimingController.performed += instance.OnAimingController;
            @AimingController.canceled += instance.OnAimingController;
            @firing.started += instance.OnFiring;
            @firing.performed += instance.OnFiring;
            @firing.canceled += instance.OnFiring;
        }

        private void UnregisterCallbacks(IDefaultMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Aiming.started -= instance.OnAiming;
            @Aiming.performed -= instance.OnAiming;
            @Aiming.canceled -= instance.OnAiming;
            @AimingController.started -= instance.OnAimingController;
            @AimingController.performed -= instance.OnAimingController;
            @AimingController.canceled -= instance.OnAimingController;
            @firing.started -= instance.OnFiring;
            @firing.performed -= instance.OnFiring;
            @firing.canceled -= instance.OnFiring;
        }

        public void RemoveCallbacks(IDefaultMovementActions instance)
        {
            if (m_Wrapper.m_DefaultMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultMovementActions @DefaultMovement => new DefaultMovementActions(this);
    private int m_MouseKeySchemeIndex = -1;
    public InputControlScheme MouseKeyScheme
    {
        get
        {
            if (m_MouseKeySchemeIndex == -1) m_MouseKeySchemeIndex = asset.FindControlSchemeIndex("MouseKey");
            return asset.controlSchemes[m_MouseKeySchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IDefaultMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnAiming(InputAction.CallbackContext context);
        void OnAimingController(InputAction.CallbackContext context);
        void OnFiring(InputAction.CallbackContext context);
    }
}
